import telebot
from telebot import types


token = '7917746739:AAGb16veqs4-xGoqVW6IlyPLhqq8sZUzZL4'
ADMIN_USER_ID = 228718620
bot = telebot.TeleBot(token)

def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîÑ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å"))
    return markup


#–°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å
exercises = {
    'üèÉ‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è–ö–∞—Ä–¥–∏–æ': 1000,
    'üí™–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞': 2000,
    'üßò–ô–æ–≥–∞': 1500,
    'ü§∏–†–∞—Å—Ç—è–∂–∫–∞': 1200
}

user_data = {} #–ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "start"
def start_handler(message):
  welcome_message ='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
  bot.send_message(message.chat.id, welcome_message, reply_markup=create_main_keyboard())
  show_exercises_menu(message)


def show_exercises_menu(message):
  markup = types.InlineKeyboardMarkup()
  for exercise, price in exercises.items(): #–∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–Ω–∏–º–∞–µ—Ç —á—Ç–æ –∑–Ω–∞—á–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è 'price'
    button_text = exercise + '-' + str(price) + '—Ä—É–±.'
    markup.add(types.InlineKeyboardButton(button_text, callback_data=exercise))
  bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:',
                   reply_markup=markup) #–∫–∞–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Å—Ç—Ä–æ–∫–∏

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏, –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
def exercise_selected(call): #call —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ telebot, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É
  exercise = call.data
  price = exercises[exercise]
  user_data[call.message.chat.id] = {'exercise': exercise}
  bot.send_message(call.message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏:' + '-' + exercise + '-' +
                   str(price) + '\n–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ')
  bot.register_next_step_handler(call.message, get_phone_number) #—É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞


#–ø–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def get_phone_number(message):
  phone_number = message.text
  user_data[message.chat.id]['phone_number'] = phone_number
  bot.send_message(message.chat.id,
                   '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è: ')
  bot.register_next_step_handler(message, get_date_time)  #–ø–æ—á–µ–º—É –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —É–±—Ä–∞–ª–∏ 'call'?


def get_date_time(message):
  date_time = message.text
  user_data[message.chat.id]['date_time'] = date_time
  exercise = user_data[message.chat.id]['exercise'] #–ò–∑–≤–µ–ªe—á—ë–º —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ãe –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è user_data
  phone_number = user_data[message.chat.id]['phone_number']
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  markup.add(types.KeyboardButton("üîÑ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å"))
  bot.send_message(message.chat.id,
                   '–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ ' + date_time + ' –Ω–∞ ' + exercise +
                   '\n–Ø —Å–≤—è–∂—É—Å—å —Å –í–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É ' + phone_number + ' –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π', 
                   reply_markup=markup)
  try:
     send_image(message)
  except:
     pass
  bot.send_message(ADMIN_USER_ID, '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: \n–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ' + exercise + '\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ' + date_time
                    + '\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + phone_number)


def send_image(message):
  try:
    image_path = '/root/finalJob/training_guide.jpg' # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    with open(image_path, 'rb') as image:
        bot.send_photo(message.chat.id, image, caption="–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å, " \
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å –ø–∞–º—è—Ç–∫–æ–π –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.")
  except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å


def new_booking_handler(message):
    show_exercises_menu(message)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏


#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
bot.register_message_handler(start_handler, commands=['start'])
#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
bot.register_callback_query_handler(exercise_selected, func=lambda call: call.data in exercises.keys())
#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å" (–≤–º–µ—Å—Ç–æ @bot.message_handler)
bot.register_message_handler(
    new_booking_handler,
    func=lambda message: message.text == "üîÑ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å"
)



#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling(none_stop=True)